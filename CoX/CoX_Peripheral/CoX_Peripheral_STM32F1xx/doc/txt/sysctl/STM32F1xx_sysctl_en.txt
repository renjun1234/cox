//********************************************************************************
//
//! \defgroup STM32F1xx_SysCtl STM32F1xx SysCtl
//!
//! \brief STM32F1xx SysCtl Peripheral Driver
//! 
//! The CoX Peripheral Library also provide APIs for function full functions of
//! STM32F1xx SysCtl.This module supports the whole STM32F1xx Series.
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref STM32F1xx_SysCtl_Block
//! - \ref STM32F1xx_SysCtl_Function_Desc
//! - \ref STM32F1xx_SysCtl_API_Group
//!   - \ref STM32F1xx_API_Group_RCC_Control
//!   - \ref STM32F1xx_API_Group_Power_Control
//!   - \ref STM32F1xx_API_Group_Backup_Control
//!   .
//! - \ref STM32F1xx_SysCtl_Usage
//! .
//!
//! <br />
//! \section STM32F1xx_SysCtl_Block 1. SysCtl Physical Block
//! <img src="STM32F1xx_ClockTree.png" />
//!
//! <br />
//! \section STM32F1xx_SysCtl_Function_Desc 2. Functional Description
//! The system control block has the following functions:
//! - The perpheral can be individual reset by software
//! - The clock controller generates the clocks for the whole chip, including system 
//!   clocks and all peripheral clocks.The clock generator consists of 4 clock sources
//!   which are listed below: One external 32.768 kHz low speed crystal;One external
//!   3~25 MHz high speed crystal;One internal 40 kHz low speed oscillator  
//! - When chip enters into power down mode, system clocks, some clock sources, and some 
//!   peripheral clocks will be disabled. Some clock sources and peripherals  clock are 
//!   still active in power down mode.
//! .
//!
//! <br />
//! \subsection STM32F1xx_SysCtl_API_Group 2. API Groups
//!
//! The SysCtl API is broken into three groups of functions:
//! - those that deal with RCC control,
//! - those that deal with Power control,
//! - those that deal with Backup control.
//! .
//! <br />
//! \subsection STM32F1xx_API_Group_RCC_Control 2.1 SysCtl RCC Control APIs
//!
//! The SysCtl RCC control are dealed with :
//! -SysCtlPeripheralReset()
//! -SysCtlPeripheralEnable()
//! -SysCtlPeripheralDisable()
//! -SysCtlClockSet()
//! -SysCtlPeripheralClockSourceSet()
//! -SysCtlHClockGet()
//! -SysCtlAPB1ClockGet()
//! -SysCtlAPB2ClockGet()
//! -SysCtlLSIConfig()
//! -SysCtlLSEConfig()
//! -SysCtlIntEnable()
//! -SysCtlIntDisable()
//! -SysCtlIntFlagClear()
//! -SysCtlIntFlagGet()
//! -RCCIntCallbackInit()
//! -SysCtlResetFlagGet()
//! -SysCtlResetFlagClear()
//! -SysCtlReset() 
//! .
//! 
//! <br />
//! \subsection STM32F1xx_API_Group_Power_Control 2.2 SysCtl Power Control APIs
//! - The SysCtl Power control are dealed with : 
//! -SysCtlSleep()
//! -SysCtlFlagStatusClear()
//! -SysCtlFlagStatusGet()
//! -SysCtlEnterStandbyMode()
//! -SysCtlStopModeConfig()
//! -SysCtlWakeUpPinDisable()
//! -SysCtlWakeUpPinEnable()
//! -SysCtlPVDLevelConfig() 
//! .
//!
//! <br />
//! \subsection STM32F1xx_API_Group_Backup_Control 2.3 SysCtl Backup Control APIs
//!
//! - The SysCtl Backup control are dealed with : 
//! -SysCtlBackupAccessDisable()
//! -SysCtlBackupAccessEnable()
//! -SysCtlBackupDomainReset()
//! -SysCtlBackupDataRead()
//! -SysCtlBackupDataWrite()
//! -SysCtlRtcOutPutConfig()
//! -SysCtlSetCalibValue()
//! -SysCtlTamperPinActiveLevelConfig()
//! -SysCtlTamperPinEnable()
//! -SysCtlTamperPinDisable()
//! -SysCtlTamperIntFlagGet()
//! -SysCtlTamperEventFlagGet()
//! -SysCtlTamperIntEnable()
//! -SysCtlTamperIntDisable()
//! -SysCtlTamperIntFlagClear()
//! -SysCtlTamperEventFlagClear() 
//! - .
//!
//! <br />
//! \section SYSCTL_Usage & Program Examples
//! The following example shows how to use the SysCtl API to configure the
//! system clock,enable the relative peripheral,put the processor into sleep
//! mode,and then wake up by Extern Interrupt0
//! \code
//!
//! NOTE: Reserved for example code
//!
//! \endcode
//! \note 
//!
//********************************************************************************

